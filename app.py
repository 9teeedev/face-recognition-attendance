from flask import Flask, request, jsonify
import cv2
import numpy as np
import face_recognition
import sqlite3
import threading
from flask_cors import CORS
import os
from datetime import datetime
from pprint import pprint
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from googleapiclient.errors import HttpError
from google.auth.exceptions import TransportError
import logging
import traceback
import mysql.connector
import schedule
import time


app = Flask(__name__)
CORS(app)

# Set up logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets API
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("teeedev-43df466db92f.json", scope)
client = gspread.authorize(creds)


# Google Sheet ID (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
SPREADSHEET_ID = "SPREADSHEET_ID"
try:
    sheet = client.open_by_key(SPREADSHEET_ID).sheet1  # ‡πÄ‡∏õ‡∏¥‡∏î Sheet ‡∏ï‡∏≤‡∏° ID

    test_value = sheet.cell(1, 1).value  # ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏•‡∏•‡πå A1

    print(f"‚úÖ Connected to Google Sheet. First cell value: {test_value}")
except Exception as e:
    print(f"‚ùå Cannot access the sheet: {str(e)}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á database)
def get_mysql_connection_without_db():
    return mysql.connector.connect(
        host="127.0.0.1",
        user="root",
        password="1234"
    )

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
def create_database_if_not_exists():
    try:
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        conn = get_mysql_connection_without_db()
        cursor = conn.cursor()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
        cursor.execute("CREATE DATABASE IF NOT EXISTS facedetection")
        print("‚úÖ Database 'facedetection' created or already exists")
        
        cursor.close()
        conn.close()
        return True
        
    except mysql.connector.Error as e:
        print(f"‚ùå Error creating database: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return False

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL (‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ)
def get_db_connection():
    try:
        return mysql.connector.connect(
            host="127.0.0.1",
            user="root",
            password="1234",
            database="facedetection"
        )
    except mysql.connector.Error as e:
        print(f"‚ùå Database connection error: {e}")
        # ‡∏´‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        if "Unknown database" in str(e):
            print("üîÑ Database not found, creating new database...")
            if create_database_if_not_exists():
                return mysql.connector.connect(
                    host="127.0.0.1",
                    user="root",
                    password="1234",
                    database="facedetection"
                )
        raise

def create_tables():
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô
        create_database_if_not_exists()
        
        conn = get_db_connection()
        cursor = conn.cursor()

        # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        tables = {
            "users": """
                CREATE TABLE IF NOT EXISTS users (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(255) NOT NULL,
                    user_code VARCHAR(50) UNIQUE NOT NULL,
                    face_encoding LONGBLOB NOT NULL
                );
            """,
            "check_in_out": """
                CREATE TABLE IF NOT EXISTS check_in_out (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    user_id VARCHAR(50) NOT NULL,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    status ENUM('check-in', 'check-out') NOT NULL,
                    synced TINYINT(1) DEFAULT 0
                );
            """,
            "notifications" :""" 
                CREATE TABLE IF NOT EXISTS notifications (
                    user_id VARCHAR(255) PRIMARY KEY,
                    last_notification TIMESTAMP
                );
            """
        }

        for name, query in tables.items():
            cursor.execute(query)
            print(f"‚úÖ Created table: {name}")
        
        conn.commit()
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        cursor.close()
        conn.close() # ‚úÖ ‡∏õ‡∏¥‡∏î connection ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
        
    except Exception as e:
        print(f"‚ùå Error creating tables: {e}")
        raise

create_tables()

class FaceRecognitionSystem:
    def __init__(self):
        self.lock = threading.Lock()
        
    def recognize_faces(self, frame):
        try:
            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            face_locations = face_recognition.face_locations(rgb_frame)

            if face_locations:
                face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)
                for face_encoding in face_encodings:
                    matches = self.compare_face_with_database(face_encoding)
                    with self.lock:
                        return matches if matches else "Unknown"
            return "Unknown"
        except Exception as e:
            logger.error(f"Face recognition error: {e}")
            logger.error(traceback.format_exc())
            raise

    # ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    def compare_face_with_database(self, face_encoding):
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            cursor.execute('SELECT name, user_code, face_encoding FROM users')
            database_faces = cursor.fetchall()
            
            cursor.close()
            conn.close()  # ‚úÖ ‡∏õ‡∏¥‡∏î connection ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à

            for name, user_code, stored_encoding_bytes in database_faces:
                # ‡πÅ‡∏õ‡∏•‡∏á face_encoding ‡∏à‡∏≤‡∏Å binary (BLOB) ‡πÄ‡∏õ‡πá‡∏ô numpy array
                stored_encoding = np.frombuffer(stored_encoding_bytes, dtype=np.float64)
                
                # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                match = face_recognition.compare_faces([stored_encoding], face_encoding, tolerance=0.38)

                if match[0]:
                    return name, user_code

            return None  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô

        except Exception as e:
            logger.error(f"‚ùå Face comparison error: {e}")
            logger.error(traceback.format_exc())
            return None
    
    # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    def update_notification_time(self, user_id):
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            cursor.execute("""
                INSERT INTO notifications (user_id, last_notification) 
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE last_notification = VALUES(last_notification)
            """, (user_id, now))

            conn.commit()
            cursor.close()
            conn.close()  # ‚úÖ ‡∏õ‡∏¥‡∏î connection ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
            return True

        except Exception as e:
            print(f"‚ùå Update notification error: {e}")
            return False

    # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÑ‡∏´‡∏°
    def check_last_notification(self, user_id):
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT last_notification FROM notifications WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
            cursor.close()
            conn.close()  # ‚úÖ ‡∏õ‡∏¥‡∏î connection ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à

            if result:
                last_time = result[0]  # MySQL ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô datetime ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                return (datetime.now() - last_time).total_seconds() < 3600  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á 1 ‡∏ä‡∏°.
            return False

        except Exception as e:
            print(f"‚ùå Check notification error: {e}")
            return False

    def update_absent_users(self):
        """Update absent users in Google Sheet by replacing empty cells with 0"""
        try:
            logger.info("Starting absent users update check...")
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets
            records = sheet.get_all_records()
            headers = sheet.row_values(1)

            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô "Name" ‡πÅ‡∏•‡∏∞ "User ID")
            date_columns = [col for col in headers if col not in ["Name", "User ID"]]
            
            updated = False
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô header
            for i, row in enumerate(records, start=2):
                if not row.get("User ID"):
                    continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ User ID

                update_needed = False
                new_row_values = []
                # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô headers
                for header in headers:
                    if header in date_columns:
                        value = row.get(header, "")
                        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á (‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô string ‡∏ß‡πà‡∏≤‡∏á) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0
                        if value == "" or value is None:
                            value = 0
                            update_needed = True
                    else:
                        value = row.get(header, "")
                    new_row_values.append(value)
                
                # ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏°‡∏µ‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Google Sheets
                if update_needed:
                    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î range ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡πÅ‡∏ñ‡∏ß i ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (A ‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
                    range_name = f"A{i}:{chr(65 + len(headers) - 1)}{i}"
                    try:
                        sheet.update(range_name, [new_row_values])
                        logger.info(f"Updated row {i} with values: {new_row_values}")
                        updated = True
                    except Exception as sheet_error:
                        logger.error(f"Error updating row {i}: {sheet_error}")
                        continue

            status = "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" if updated else "‚è≥ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"
            logger.info(status)
            return status

        except Exception as e:
            error_msg = f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
            logger.error(error_msg)
            return error_msg

    def setup_scheduler(self):
        """Setup scheduler for daily tasks"""
        try:
            # Schedule update_absent_users to run at noon every day
            schedule.every().day.at("16:00").do(self.update_absent_users)
            
            # Start the scheduler in a separate thread
            def run_scheduler():
                while True:
                    schedule.run_pending()
                    time.sleep(60)  # Check every minute
            
            scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
            scheduler_thread.start()
            logger.info("Scheduler started successfully")
            
        except Exception as e:
            logger.error(f"Failed to setup scheduler: {e}")
            raise
    
    def close_connection(self):
        self.conn.close()

face_system = FaceRecognitionSystem()

def sync_to_google_sheets():
    while True:
        try:
            conn = get_db_connection()
            cursor = conn.cursor(dictionary=True)

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MySQL ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° timestamp
            cursor.execute("SELECT * FROM check_in_out WHERE synced = 0 ORDER BY timestamp")
            rows = cursor.fetchall()

            if rows:
                # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Google Sheets
                data = sheet.get_all_values()
                headers = data[0]
                user_data = data[1:]  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

                for row in rows:
                    user_id = str(row["user_id"])
                    timestamp = row["timestamp"]
                    status = row["status"]

                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                    date_str = timestamp.strftime("%d/%m/%y")  # ‡πÄ‡∏ä‡πà‡∏ô "18/02/25"
                    time_str = timestamp.strftime("%H:%M")       # ‡πÄ‡∏ä‡πà‡∏ô "12:08"

                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö check-in/check-out ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ
                    checkin_col_name = f"{date_str} Check-in"
                    checkout_col_name = f"{date_str} Check-out"

                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if checkin_col_name not in headers:
                        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ
                        sheet.add_cols(2)
                        headers = sheet.row_values(1)  # ‡πÇ‡∏´‡∏•‡∏î header ‡πÉ‡∏´‡∏°‡πà
                        if checkin_col_name not in headers:
                            headers.extend([checkin_col_name, checkout_col_name])
                            sheet.update("A1", [headers])  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß header

                    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ index ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå check-in/check-out
                    try:
                        checkin_col_index = headers.index(checkin_col_name) + 1
                        checkout_col_index = headers.index(checkout_col_name) + 1
                    except ValueError:
                        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô header")
                        continue

                    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Sheet ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ User ID ‡πÅ‡∏•‡∏∞ Name
                    user_row_index = None
                    for idx, user_row in enumerate(user_data, start=2):
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö User ID
                        if len(user_row) >= 2 and str(user_row[1]).strip() == user_id.strip():
                            user_row_index = idx
                            break

                    if user_row_index is None:
                        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà
                        cursor.execute("SELECT name FROM users WHERE user_code = %s", (user_id,))
                        user = cursor.fetchone()
                        name = user["name"] if user else "Unknown"
                        
                        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏î‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö header
                        new_row = [""] * len(headers)
                        new_row[0] = name
                        new_row[1] = user_id
                        sheet.append_row(new_row)
                        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
                        data = sheet.get_all_values()
                        headers = data[0]
                        user_data = data[1:]
                        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
                        for idx, user_row in enumerate(user_data, start=2):
                            if len(user_row) >= 2 and str(user_row[1]).strip() == user_id.strip():
                                user_row_index = idx
                                break

                    # ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ user_row_index ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ã‡∏•‡∏•‡πå Check-in ‡∏´‡∏£‡∏∑‡∏≠ Check-out ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
                    if status == "check-in":
                        current_val = sheet.cell(user_row_index, checkin_col_index).value
                        if not current_val or current_val.strip() == "":
                            sheet.update_cell(user_row_index, checkin_col_index, time_str)
                    elif status == "check-out":
                        current_val = sheet.cell(user_row_index, checkout_col_index).value
                        if not current_val or current_val.strip() == "":
                            sheet.update_cell(user_row_index, checkout_col_index, time_str)

                    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ sync ‡πÉ‡∏ô MySQL
                    cursor.execute("UPDATE check_in_out SET synced = 1 WHERE id = %s", (row["id"],))
                    conn.commit()

                print("‚úÖ Sync completed successfully.")

            cursor.close()
            conn.close()

        except Exception as e:
            print(f"‚ùå Error syncing to Google Sheets: {e}")

        time.sleep(10)  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡πÉ‡∏ô background
threading.Thread(target=sync_to_google_sheets, daemon=True).start()




# WEB API
UPLOAD_FOLDER = 'faces_upload'
# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

@app.route('/upload', methods=['POST'])
def upload_image():
    try:
        if 'file' not in request.files:
            logger.warning("No file part in request")
            return jsonify({"error": "No file part"}), 400
        
        file = request.files['file']
        if file.filename == '':
            logger.warning("No selected file")
            return jsonify({"error": "No selected file"}), 400
        
        # Read and decode image
        file_bytes = file.read()
        nparr = np.frombuffer(file_bytes, np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        if image is None:
            logger.error("Failed to decode image")
            return jsonify({"error": "Failed to decode image"}), 400
            
        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{timestamp}.jpg"
        
        # Recognize face
        user = face_system.recognize_faces(image)
        logger.info(f"Recognized user: {user}")
        
        if not user:
            return jsonify({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"}), 400
            
        if user == "Unknown":
            return jsonify({"name": user, "saved_image": filename})

        # Check if attendance was marked within last hour
        if face_system.check_last_notification(user[1]):
            print("Has Checked")
            return jsonify({"name": user, "message": "Checked"}), 200

        # Update notification time
        face_system.update_notification_time(user[1])
        user_id = user[1]

         # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á user_id ‡∏ô‡∏µ‡πâ
        cursor.execute("SELECT status FROM check_in_out WHERE user_id = %s ORDER BY timestamp DESC LIMIT 1", (user_id,))
        last_record = cursor.fetchone()

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà
        if last_record and last_record['status'] == 'check-in':
            new_status = 'check-out'
        else:
            new_status = 'check-in'

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        cursor.execute("INSERT INTO check_in_out (user_id, timestamp, status) VALUES (%s, %s, %s)", 
                       (user_id, now, new_status))
        conn.commit()
        
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        cursor.close()
        conn.close()

        return jsonify({"name": user, "saved_image": filename, "message": new_status}), 200
    
    except Exception as e:
        logger.error(f"Upload error: {e}")
        logger.error(traceback.format_exc())
        return jsonify({"error": str(e)}), 500


@app.route('/status', methods=['GET', 'HEAD'])
def server_status():
    return '', 200  # ‡∏™‡πà‡∏á Response ‡∏ß‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° Status Code 200 (OK)

# ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å MySQL
@app.route('/get_users', methods=['GET'])
def get_users():
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)  # ‡πÉ‡∏ä‡πâ dictionary=True ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô dict
        cursor.execute("SELECT id, name, user_code FROM users ORDER BY CAST(user_code AS UNSIGNED) ASC")
        users = cursor.fetchall()
        
        cursor.close()
        conn.close()  # ‚úÖ ‡∏õ‡∏¥‡∏î connection ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
        return jsonify(users), 200

    except Exception as e:
        print(f"‚ùå Error fetching users: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/sort_data', methods=['POST'])
def sort_data():
    max_retries = 5  # ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    retry_delay = 3   # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà

    for attempt in range(1, max_retries + 1):
        try:
            records = sheet.get_all_records()
            
            if not records:
                print("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheets")
                return jsonify({"success": True, "message": "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á"}), 200

            # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∞‡πÑ‡∏õ‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î)
            def safe_int(value):
                try:
                    return int(value)
                except ValueError:
                    return float('inf')

            # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° User ID
            sorted_records = sorted(records, key=lambda x: safe_int(x["User ID"]))

            # ‚úÖ ‡∏•‡πâ‡∏≤‡∏á Sheet ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß
            sheet.clear()
            sheet.insert_row(["Name", "User ID"] + list(sorted_records[0].keys())[2:], 1)
            for row in sorted_records:
                sheet.append_row(list(row.values()))

            print("‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {})".format(attempt))
            return jsonify({"success": True, "message": "‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}), 200

        except (ConnectionResetError, TimeoutError) as e:
            print(f"‚ö†Ô∏è Google Sheets Error (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt}): {e}")
            if attempt < max_retries:
                print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô {retry_delay} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
                time.sleep(retry_delay)  # ‡∏£‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            else:
                print("‚ùå ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return jsonify({"success": False, "message": "Google Sheets Error: ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß"}), 500

        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            return jsonify({"success": False, "message": f"Google Sheets Error: {str(e)}"}), 500
    
@app.route('/add_user', methods=['POST'])
def add_user():
    try:
        name = request.form.get('name')
        user_code = request.form.get('user_code')
        file = request.files.get('file')

        print(f"Name: {name}, User Code: {user_code}, File: {file.filename if file else 'No file'}")

        if not all([name, user_code, file]):
            return jsonify({"success": False, "message": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}), 400

        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô numpy array
        file_contents = file.read()
        nparr = np.frombuffer(file_contents, np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)

        if image is None:
            return jsonify({"success": False, "message": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ"}), 400

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏µ‡∏à‡∏≤‡∏Å BGR ‡πÄ‡∏õ‡πá‡∏ô RGB
        rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        face_locations = face_recognition.face_locations(rgb_image)
        if not face_locations:
            return jsonify({"success": False, "message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"}), 400

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á face encoding
        face_encodings = face_recognition.face_encodings(rgb_image, face_locations)
        if not face_encodings:
            return jsonify({"success": False, "message": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"}), 400

        face_encoding_bytes = face_encodings[0].tobytes()

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL
        conn = get_db_connection()
        cursor = conn.cursor()

        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user_code ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not user_code.strip():
                return jsonify({"success": False, "message": "‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ"}), 400
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ user_code ‡∏ã‡πâ‡∏≥‡πÑ‡∏´‡∏°
            cursor.execute('SELECT user_code FROM users WHERE user_code = %s', (user_code,))
            if cursor.fetchone():
                return jsonify({"success": False, "message": "‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß"}), 400

            # ‚úÖ ‡πÉ‡∏ä‡πâ %s ‡πÅ‡∏•‡∏∞ BLOB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MySQL
            cursor.execute(
                'INSERT INTO users (name, user_code, face_encoding) VALUES (%s, %s, %s)',
                (name, user_code, face_encoding_bytes)
            )
            conn.commit()

            # ‚úÖ ‡∏õ‡∏¥‡∏î connection ‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
            cursor.close()
            conn.close()


            return jsonify({"success": True, "message": "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}), 200

        
        except mysql.connector.Error as e:
            return jsonify({"success": False, "message": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}"}), 500
        finally:
            cursor.close()
            conn.close()

    except Exception as e:
        return jsonify({"success": False, "message": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}), 500


@app.route('/delete_user/<int:user_id>', methods=['DELETE'])
def delete_user(user_id):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # ‡∏î‡∏∂‡∏á user_code ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
        cursor.execute('SELECT user_code FROM users WHERE id = %s', (user_id,))
        user = cursor.fetchone()
        if not user:
            return jsonify({"success": False, "message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}), 404
        user_code = str(user[0])

        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å `users`
        cursor.execute('DELETE FROM users WHERE id = %s', (user_id,))
        
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å `notifications` ‡∏ï‡∏≤‡∏° `user_code`
        cursor.execute('DELETE FROM notifications WHERE user_id = %s', (user_code,))

        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å `check_in_out` ‡∏ï‡∏≤‡∏° `user_code`
        cursor.execute('DELETE FROM check_in_out WHERE user_id = %s', (user_code,))
        conn.commit()

        cursor.close()
        conn.close()

        # Retry logic for updating Google Sheet
        retry_count = 3
        attempt = 0
        success = False

        while attempt < retry_count and not success:
            try:
                # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet
                records = sheet.get_all_records()
                for idx, record in enumerate(records, start=2):  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 (‡∏Ç‡πâ‡∏≤‡∏° header)
                    if str(record.get("User ID")) == user_code:
                        sheet.delete_rows(idx)  # ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô Google Sheet
                        return jsonify({"success": True, "message": "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}), 200
            except (gspread.exceptions.APIError, TransportError, TimeoutError) as e:
                    print(f"‚ùå Google Sheets API Error: {e}")
                    attempt += 1
                    time.sleep(2)  # ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà

        if success:
            return jsonify({"success": True, "message": "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}), 200
        else:
            return jsonify({"success": False, "message": "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Google Sheet ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}), 500
    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 500

@app.route('/update_user/<int:user_id>', methods=['PUT'])
def update_user(user_id):
    try:
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON"}), 400

        name = data.get('name')
        user_code = data.get('user_code')

        if not name or not user_code:
            return jsonify({"success": False, "message": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö"}), 400

        conn = get_db_connection()
        cursor = conn.cursor()
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
        cursor.execute('SELECT user_code FROM users WHERE id = %s', (user_id,))
        old_user = cursor.fetchone()
        if not old_user:
            return jsonify({"success": False, "message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"}), 404
        old_user_code = str(old_user[0])

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user_code ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        cursor.execute('SELECT id FROM users WHERE user_code = %s AND id != %s', (user_code, user_id))
        if cursor.fetchone():
            return jsonify({"success": False, "message": "‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"}), 400

        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô SQLite
        cursor.execute('UPDATE users SET name = %s, user_code = %s WHERE id = %s', (name, user_code, user_id))
        conn.commit()
        conn.close()

        # Retry logic for updating Google Sheet
        retry_count = 3
        attempt = 0
        success = False

        while attempt < retry_count and not success:
            try:
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheet
                records = sheet.get_all_records()
                for idx, record in enumerate(records, start=2):
                    if str(record.get("User ID")) == old_user_code:
                        sheet.update_cell(idx, 1, name)  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ä‡∏∑‡πà‡∏≠
                        sheet.update_cell(idx, 2, user_code)  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó User ID
                        print(f"‚úÖ Updated {name} {user_code} to sheet success")
                success = True
            except (gspread.exceptions.APIError, TransportError, TimeoutError) as e:
                    print(f"‚ùå Google Sheets API Error: {e}")
                    attempt += 1
                    time.sleep(2)  # ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà

        if success:
            return jsonify({"success": True, "message ": "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}), 200
        else:
            return jsonify({"success": False, "message": "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Google Sheet ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}), 500
    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)